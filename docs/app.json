[{"name": "app.py", "content": "import plotly.express as px\nimport palmerpenguins\nimport seaborn as sns\nfrom shiny import render \nfrom shiny import reactive\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins\nfrom shinywidgets import output_widget, render_widget, render_plotly\n\n# Load Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\npenguins = load_penguins()\n\nui.page_opts(title=\"Evan's Penguin Data\", fillable=True)\n\nwith ui.layout_columns(): \n    with ui.card():\n        ui.card_header(\"Data Table\")\n\n        @render.data_frame\n        def penguins_dt():\n            return render.DataTable(filtered_data())  # Changed to filtered_data()\n\n    with ui.card():\n        ui.card_header(\"Data Grid\")\n\n        @render.data_frame\n        def penguins_dg():\n            return render.DataGrid(filtered_data())  # Changed to filtered_data()\n\nwith ui.layout_columns(): \n    with ui.card(fill=True):\n        ui.card_header(\"Plotly Histogram\")\n\n        @render_widget\n        def plot1():\n            scatterplot = px.histogram(\n                data_frame=filtered_data(),  # Changed to filtered_data()\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n            ).update_layout(\n                title={\"text\": \"Palmer Penguins\", \"x\": 0.5},\n                yaxis_title=\"Count\",\n                xaxis_title=input.selected_attribute(),\n            )\n            return scatterplot\n\n    with ui.card():\n        ui.card_header(\"Seaborn Histogram\")\n\n        @render.plot\n        def plot2():\n            ax = sns.histplot(\n                data=filtered_data(),  # Changed to filtered_data()\n                x=input.selected_attribute(),\n                bins=input.seaborn_bin_count(),\n            )\n            ax.set_title(\"Palmer Penguins\")\n            ax.set_xlabel(input.selected_attribute())\n            ax.set_ylabel(\"Number\")\n            return ax\n\n# Add a sidebar\nwith ui.sidebar(position=\"left\", bg=\"#f8f8f8\", open=\"open\"):\n    ui.h2(\"Sidebar\")\n    \n    # Drop-Down menu\n    ui.input_selectize(\n        id=\"selected_attribute\",\n        label=\"Selected Attribute\",\n        choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n    \n    # Numeric Input field\n    ui.input_numeric(id=\"plotly_bin_count\", label=\"Bin Count (Plotly)\", value=10)\n    \n    # Slider input\n    ui.input_slider(\n        id=\"seaborn_bin_count\", label=\"Bin Count (Seaborn)\", min=3, max=21, value=7\n    )\n\n    # Checkbox filter\n    ui.input_checkbox_group(\n        id=\"selected_species_list\",\n        label=\"Species\",\n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=False,\n    )\n    \n    # Insert dividing line\n    ui.hr()\n    \n    # Insert link\n    ui.a(\n        \"Source code on GitHub\",\n        href=\"https://github.com/evandobler98/cintel-02-data\",\n        target=\"_blank\",\n    )\n\n# Insert a Plotly Scatterplot\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot: Species\")\n\n    @render_plotly\n    def plotly_scatterplot():\n        return px.scatter(\n            data_frame=filtered_data(),  # Changed to filtered_data()\n            x=\"bill_length_mm\",\n            y=\"bill_depth_mm\",\n            color=\"species\",\n            symbol=\"island\",\n            labels={\n                \"bill_depth_mm\": \"Bill Depth\",\n                \"bill_length_mm\": \"Bill Length\",\n                \"species\": \"Species\",\n                \"island\": \"Island\"\n            },\n        )\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n@reactive.calc\ndef filtered_data():\n    \n    # Get the selected species from the checkbox input\n    selected_species = input.selected_species_list()\n    \n    # Filter the dataset based on selected species\n    filtered_df = penguins_df[penguins_df['species'].isin(selected_species)]\n    \n    return filtered_df", "type": "text"}]